{"version":3,"sources":["store/action.tsx","store/index.ts","store/selectors.tsx","api/api.tsx","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionType","setUserAction","payload","type","SET_USER","initialState","todos","user","store","createStore","state","action","SET_TODOS","DELETE_USER","getUserSelector","apiUrlTodos","TodoList","dispatch","useDispatch","useState","title","setTitle","selectedValue","setSelectedValue","userSelector","useSelector","filteredTodos","a","fetch","then","response","ok","Error","json","todosFromServer","useEffect","titles","clickSelectUser","userId","selectedUserId","finishGoods","prepareForFilterTodos","filter","todo","completed","toLocaleLowerCase","includes","className","value","placeholder","onChange","event","target","map","classNames","readOnly","checked","id","onClick","method","CurrentUser","name","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"uNAAYA,E,gEAAAA,K,sBAAAA,E,oBAAAA,E,2BAAAA,M,KAsBL,IAKMC,EAAgB,SAACC,GAAD,MAA2B,CACtDC,KAAMH,EAAWI,SACjBF,YC1BIG,EAAsB,CAC1BC,MAAO,GACPC,KAAM,MA4BKC,EAAQC,aAzBL,WAA2C,IAA1CC,EAAyC,uDAAjCL,EAAcM,EAAmB,uCACxD,OAAQA,EAAOR,MACb,KAAKH,EAAWY,UACd,OAAO,2BACFF,GADL,IAEEJ,MAAM,YAAKK,EAAOT,WAGtB,KAAKF,EAAWI,SACd,OAAO,2BACFM,GADL,IAEEH,KAAMI,EAAOT,UAGjB,KAAKF,EAAWa,YACd,OAAO,2BACFH,GADL,IAEEH,KAAM,OAGV,QACE,OAAOG,M,+DCtBAI,EAAkB,SAACJ,GAAD,OAAkBA,EAAMH,MCPjDQ,EAAc,0C,eCWPC,EAAqB,WAChC,IAAMC,EAAWC,cAEjB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAEMC,EAAeC,YAAYX,GAE3BY,EAAa,uCAAG,4BAAAC,EAAA,sEDffC,MAAMb,GACVc,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,cAGlB,OAAOF,EAASG,UCSE,OACdC,EADc,OAGpBjB,GJA2Bf,EIAHgC,EJAwB,CAClD/B,KAAMH,EAAWY,UACjBV,aILsB,iCJGM,IAACA,IIHP,OAAH,qDAMnBiC,qBAAU,WACRT,MACC,IAEH,IF5BuCU,EE4BjCC,EAAe,uCAAG,WAAOC,GAAP,eAAAX,EAAA,sEDfDY,ECgBOD,EDfvBV,MAAM,GAAD,OAdM,0CAcN,YAAmBW,IAC5BV,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,cAGlB,OAAOF,EAASG,UCQI,OAChB1B,EADgB,OAGtBU,EAAShB,EAAcM,IAHD,iCDfF,IAACgC,ICeC,OAAH,sDAmBrB,IAAMC,EAXN,SAAgBC,GACd,OAAQnB,GACN,IAAK,YACH,OAAOmB,EAAsBC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,aACnD,IAAK,SACH,OAAOH,EAAsBC,QAAO,SAAAC,GAAI,OAAKA,EAAKC,aACpD,QACE,OAAOH,GAIOC,CAbAjB,aFlCmBW,EEkCkBhB,EFjClD,SAACV,GAAD,OAAmBA,EAAMJ,MAC7BoC,QAAO,SAACC,GAAD,OAAgBA,EAAKvB,MAAMyB,oBAChCC,SAASV,EAAOS,4BE8CrB,OACE,sBAAKE,UAAU,WAAf,UACE,wCACA,sBAAKA,UAAU,2BAAf,UACE,iDACA,uBACE,UAAQ,gBACR5C,KAAK,OACL6C,MAAO5B,EACP2B,UAAU,kBACVE,YAAY,gBACZC,SAAU,SAACC,GACT9B,EAAS8B,EAAMC,OAAOJ,UAI1B,0CACA,yBACED,UAAU,mCACVG,SAAU,SAACC,GACT5B,EAAiB4B,EAAMC,OAAOJ,QAHlC,UAME,wBAAQA,MAAM,MAAd,mBACA,wBAAQA,MAAM,SAAd,qBACA,wBAAQA,MAAM,YAAd,2BAEF,oBAAID,UAAU,iBAAiB,UAAQ,cAAvC,SACGP,EAAYa,KAAI,SAAAV,GAAI,OACnB,qBAEEI,UAAWO,IACT,iBACA,CACE,6BAA8BX,EAAKC,UACnC,0BAA2BD,EAAKC,YANtC,UAUE,kCACE,uBAAOzC,KAAK,WAAWoD,UAAQ,EAACC,QAASb,EAAKC,YAC9C,4BAAID,EAAKvB,WAGX,gCAEE,wBACE,UAAQ,aACR2B,UAAWO,IACT,wBAAyB,SACzB,CACE,mCACe,OAAZ9B,QAAY,IAAZA,OAAA,EAAAA,EAAciC,MAAOd,EAAKL,SAGjCnC,KAAK,SACLuD,QAAS,WACPrB,EAAgBM,EAAKL,SAXzB,yBAcYK,EAAKL,UAGjB,wBACES,UAAU,SACV5C,KAAK,SACLuD,QAAO,sBAAE,sBAAA/B,EAAA,sED3FUW,EC4FUK,EAAKc,GD3F3C7B,MAAM,GAAD,OAAIb,EAAJ,YAAmBuB,GAAU,CACvCqB,OAAQ,WCyFe,OAEPjC,IAFO,iCD3FS,IAACY,IC2FV,OAHX,yBAjCGK,EAAKc,gBC1EXG,G,MAAwB,WACnC,IAAMrD,EAAOkB,YAAYX,GACnBG,EAAWC,cAEjB,OACE,mCACGX,EAEG,sBAAKwC,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SACE,wDAAyBxC,EAAKkD,QAGhC,wBACEtD,KAAK,SACL4C,UAAU,mBACVW,QAAS,WACPzC,EAAShB,EAAc,QAJ3B,mBAUA,oBACE8C,UAAU,oBACV,UAAQ,WAFV,SAIGxC,EAAKsD,OAER,mBAAGd,UAAU,qBAAb,SAAmCxC,EAAKuD,QACxC,mBAAGf,UAAU,qBAAb,SAAmCxC,EAAKwD,WAK1C,uBCrBKC,EAhBH,WACV,OACE,sBAAKjB,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,cAAC,EAAD,YCJJkB,EAAO,kBACX,cAAC,IAAD,CAAUzD,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKN0D,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.9eee3996.chunk.js","sourcesContent":["export enum ActionType {\n  SET_TODOS = 'SET_TODOS',\n  SET_USER = 'SET_USER',\n  DELETE_USER = 'DELETE_USER',\n}\n\nexport interface SetTodosAction {\n  type: ActionType.SET_TODOS,\n  payload: Todo[],\n}\n\nexport interface SetUserAction {\n  type: ActionType.SET_USER,\n  payload: User | null,\n}\n\nexport type Action = SetTodosAction | SetUserAction | DeleteUserAction;\n\nexport interface DeleteUserAction {\n  type: ActionType.DELETE_USER,\n}\n\nexport const setTodosAction = (payload: Todo[]) => ({\n  type: ActionType.SET_TODOS,\n  payload,\n});\n\nexport const setUserAction = (payload: User | null) => ({\n  type: ActionType.SET_USER,\n  payload,\n});\n","import { createStore } from 'redux';\nimport { Action, ActionType } from './action';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case ActionType.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case ActionType.DELETE_USER:\n      return {\n        ...state,\n        user: null,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","export const getTodosSelector = (state: State) => state.todos;\nexport const getFilteredTodosSelector = (titles: string) => {\n  return (state: State) => (state.todos\n    .filter((todo: Todo) => todo.title.toLocaleLowerCase()\n      .includes(titles.toLocaleLowerCase())));\n};\n\nexport const getUserSelector = (state: State) => state.user;\n","const apiUrlTodos = 'https://mate.academy/students-api/todos';\nconst apiUrlUsers = 'https://mate.academy/students-api/users';\n\nexport const getTodos = ():Promise<Todo[]> => {\n  return fetch(apiUrlTodos)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Todo error');\n      }\n\n      return response.json();\n    });\n};\n\nexport const getUsers = (selectedUserId: number) => {\n  return fetch(`${apiUrlUsers}/${selectedUserId}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('User error');\n      }\n\n      return response.json();\n    });\n};\n\nexport const deleteTodoFromServer = (userId: number) => {\n  return fetch(`${apiUrlTodos}/${userId}`, {\n    method: 'DELETE',\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  setTodosAction, setUserAction,\n} from '../../store/action';\nimport { getFilteredTodosSelector, getUserSelector }\n  from '../../store/selectors';\nimport { getUsers, getTodos, deleteTodoFromServer } from '../../api/api';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const [title, setTitle] = useState('');\n  const [selectedValue, setSelectedValue] = useState('');\n\n  const userSelector = useSelector(getUserSelector);\n\n  const filteredTodos = async () => {\n    const todosFromServer = await getTodos();\n\n    dispatch(setTodosAction(todosFromServer));\n  };\n\n  useEffect(() => {\n    filteredTodos();\n  }, []);\n\n  const clickSelectUser = async (userId: number) => {\n    const user = await getUsers(userId);\n\n    dispatch(setUserAction(user));\n  };\n\n  const filterTitle = useSelector(getFilteredTodosSelector(title));\n\n  function filter(prepareForFilterTodos: Todo[]) {\n    switch (selectedValue) {\n      case 'completed':\n        return prepareForFilterTodos.filter(todo => todo.completed);\n      case 'active':\n        return prepareForFilterTodos.filter(todo => !todo.completed);\n      default:\n        return prepareForFilterTodos;\n    }\n  }\n\n  const finishGoods = filter(filterTitle);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <h4>Filter by title</h4>\n        <input\n          data-cy=\"filterByTitle\"\n          type=\"text\"\n          value={title}\n          className=\"TodoList__input\"\n          placeholder=\"Enter a title\"\n          onChange={(event) => {\n            setTitle(event.target.value);\n          }}\n\n        />\n        <h4> Status:</h4>\n        <select\n          className=\"TodoList__input TodoList__input \"\n          onChange={(event) => {\n            setSelectedValue(event.target.value);\n          }}\n        >\n          <option value=\"all\"> All </option>\n          <option value=\"active\">Active </option>\n          <option value=\"completed\">Completed </option>\n        </select>\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {finishGoods.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                },\n              )}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly checked={todo.completed} />\n                <p>{todo.title}</p>\n              </label>\n\n              <div>\n\n                <button\n                  data-cy=\"userButton\"\n                  className={classNames(\n                    'TodoList__user-button', 'button',\n                    {\n                      'TodoList__user-button--selected':\n                         userSelector?.id === todo.userId,\n                    },\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    clickSelectUser(todo.userId);\n                  }}\n                >\n                  {`User# ${todo.userId}`}\n                </button>\n\n                <button\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={async () => {\n                    await deleteTodoFromServer(todo.id);\n                    filteredTodos();\n                  }}\n                >\n                  Delete\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserSelector } from '../../store/selectors';\nimport { setUserAction } from '../../store/action';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(getUserSelector);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      {user\n        ? (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected User: ${user.id}`}</span>\n            </h2>\n\n            <button\n              type=\"button\"\n              className=\"button is-danger\"\n              onClick={() => {\n                dispatch(setUserAction(null));\n              }}\n            >\n              Clear\n            </button>\n\n            <h3\n              className=\"CurrentUser__name\"\n              data-cy=\"userName\"\n            >\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </div>\n\n        )\n        : (\n          'No user selected'\n        )}\n    </>\n  );\n};\n","import './App.scss';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { store } from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}